scalar Date
scalar JSON

"Indicates a different name that the corresponding argument or field_definition may have"
directive @alias(name: String! = "") repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

directive @discriminator(
    "Field name that is unique to this subtype of the @subtyping annotated interface if SUBTYPE_FIELD_NAME strategy is selected"
    fieldName: String = null,
    "Field value that is unique to this subtype of the @subtyping annotated interface if SUBTYPE_FIELD_VALUE strategy is selected and a discriminatorFieldName has been supplied"
    fieldValue: JSON = null
) on OBJECT

"""
Indicates temporal field represents latest datetime
at which the given object type instance is considered "current".

There should at most be one field within a given
object type definition that represents
the latest timestamp

"""
directive @last_updated on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"Indicates how an interface type may be resolved into an object type"
directive @subtyping(
    strategy: SubtypingStrategy! = SUBTYPE_FIELD_NAME,
    "Name of field on parent interface that will have one of the @discriminator-directive values, required if SUBTYPE_FIELD_VALUE strategy is selected"
    discriminatorFieldName: String
) on INTERFACE

enum SubtypingStrategy {
    "@discriminator directive on annotated object subtype contains the name of the field unique to the subtype to be used to select that subtype when resolving parent interface type"
    SUBTYPE_FIELD_NAME
    "@discriminator directive on annotated object subtype contains the value of the field unique to the subtype to be used to select that subtype when resolving parent interface type"
    SUBTYPE_FIELD_VALUE
}

schema {
    query: Query
}

type Query {
    show(showId: ID): Show
    director(name: String! @alias(name: "director_name")): Director
    actor(name: String! @alias(name: "actor_name")): Actor
}

interface Show @subtyping(strategy: SUBTYPE_FIELD_VALUE, discriminatorFieldName: "type") {
    showId: ID!
    type: String!
    title: String!
    releaseYear: Int!
    director: Director
    cast: [Actor!]!
    audienceSuitabilityRating: String! @alias(name: "rating")
    productionCountry: String! @alias(name: "country")
    genres: [String!]! @alias(name: "listedIn")
    dateAdded: Date!
}

type Movie implements Show @discriminator(fieldValue: "Movie") {
    showId: ID!
    type: String!
    title: String!
    releaseYear: Int!
    director: Director
    cast: [Actor!]!
    audienceSuitabilityRating: String!
    productionCountry: String!
    genres: [String!]!
    dateAdded: Date!
    duration: Int
}

type TVShow implements Show @discriminator(fieldValue: "TV Show") {
    showId: ID!
    type: String!
    title: String!
    releaseYear: Int!
    director: Director
    cast: [Actor!]!
    audienceSuitabilityRating: String!
    productionCountry: String!
    genres: [String!]!
    dateAdded: Date!
    numberOfSeasons: Int
}

type Director {
    name(format: NameFormat): String!
    filmography: [Show!]!
}

input NameFormat {
    nameComponents: [NameComponent!]! = [LAST_NAME]
}

enum NameComponent {
    FIRST_NAME
    LAST_NAME
}

type Actor {
    name: String!
    filmography: [Show!]!
}
