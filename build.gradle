plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id 'org.jetbrains.kotlin.plugin.spring' version "${kotlinVersion}" apply false
    id "org.springframework.boot" version "${springBootPluginVersion}"
}

jar {
    enabled = false
}

bootJar {
    enabled = false
}

allprojects {
    sourceCompatibility = sourceCompatibility
    targetCompatibility = targetCompatibility

    repositories {
        mavenCentral()
        maven {
            name = "Spring Milestone"
            url = "https://repo.spring.io/milestone"
        }
    }
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.plugin.spring'
    sourceCompatibility = sourceCompatibility
    targetCompatibility = targetCompatibility
    configurations {
        kotlinDeps {
            dependencies {
                implementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
                implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
                implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
                implementation("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
                implementation("org.jetbrains.kotlinx:kotlinx-collections-immutable-jvm:${kotlinxImmutableCollectionsVersion}")
                testImplementation("org.jetbrains.kotlin:kotlin-test:${kotlinVersion}")
                testImplementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
                testImplementation("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
                testImplementation("org.jetbrains.kotlinx:kotlinx-collections-immutable-jvm:${kotlinxImmutableCollectionsVersion}")
            }
        }
        jackson {
            dependencies {
                implementation("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
                implementation("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
                implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
                implementation("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}")
                implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")
                implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}")
                implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")
                implementation("com.fasterxml.jackson.module:jackson-module-parameter-names:${jacksonVersion}")
                testImplementation("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
                testImplementation("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
                testImplementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
                testImplementation("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}")
                testImplementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")
                testImplementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}")
                testImplementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")
                testImplementation("com.fasterxml.jackson.module:jackson-module-parameter-names:${jacksonVersion}")
            }
        }
        jayway {
            dependencies {
                implementation("com.jayway.jsonpath:json-path:${jaywayVersion}")
                testImplementation("com.jayway.jsonpath:json-path:${jaywayVersion}")
            }
        }
        arrow {
            dependencies {
                implementation(platform("io.arrow-kt:arrow-stack:${arrowStackVersion}"))
                implementation("io.arrow-kt:arrow-core")
                implementation("io.arrow-kt:arrow-optics")
                implementation("io.arrow-kt:arrow-fx-coroutines")
                implementation("io.arrow-kt:arrow-integrations-jackson-module:${arrowJacksonVersion}")
                testImplementation(platform("io.arrow-kt:arrow-stack:${arrowStackVersion}"))
                testImplementation("io.arrow-kt:arrow-core")
                testImplementation("io.arrow-kt:arrow-optics")
                testImplementation("io.arrow-kt:arrow-fx-coroutines")
                testImplementation("io.arrow-kt:arrow-integrations-jackson-module:${arrowJacksonVersion}")
            }
        }
        reactor {
            dependencies {
                implementation("io.projectreactor:reactor-core:${reactorCoreVersion}")
                implementation("io.projectreactor.addons:reactor-extra:${reactorExtraVersion}")
                implementation("io.projectreactor.kotlin:reactor-kotlin-extensions:${reactorKotlinExtensionsVersion}")
                testImplementation("io.projectreactor:reactor-core:${reactorCoreVersion}")
                testImplementation("io.projectreactor.addons:reactor-extra:${reactorExtraVersion}")
                testImplementation("io.projectreactor.kotlin:reactor-kotlin-extensions:${reactorKotlinExtensionsVersion}")
                testImplementation("io.projectreactor:reactor-test:${reactorCoreVersion}")
            }
        }
        spring {
            dependencies {
                implementation("org.springframework.boot:spring-boot-starter-webflux:${springBootPluginVersion}")
                testImplementation("org.springframework.boot:spring-boot-starter-webflux:${springBootPluginVersion}")
                testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootPluginVersion}")
            }
        }
        junit {
            dependencies {
                testImplementation(platform("org.junit:junit-bom:${jUnitJupiterVersion}"))
                testImplementation("org.junit.jupiter:junit-jupiter")
            }
        }
        graphql {
            dependencies {
                // not currently available on maven_central but is available on spring milestone
                implementation("org.springframework.graphql:spring-graphql:${springGraphQLVersion}")
                implementation("com.querydsl:querydsl-core:5.0.0")
                implementation("com.netflix.graphql.dgs:graphql-dgs-webflux-starter:${dgsVersion}")
                implementation("com.netflix.graphql.dgs:graphql-dgs-extended-scalars:${dgsVersion}")
                implementation("com.graphql-java:graphql-java:${graphQLJavaVersion}")
                testImplementation("com.graphql-java:graphql-java:${graphQLJavaVersion}")
                implementation("com.graphql-java:graphql-java-extended-scalars:${graphQLJavaExtScalarsVersion}")
                testImplementation("com.graphql-java:graphql-java-extended-scalars:${graphQLJavaExtScalarsVersion}")
            }
        }
        validator {
            dependencies {
                implementation("javax.validation:validation-api:${javaxValidationVersion}")
                implementation("org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}")
                implementation("org.hibernate.validator:hibernate-validator-annotation-processor:${hibernateValidatorVersion}")
                testImplementation("javax.validation:validation-api:${javaxValidationVersion}")
                testImplementation("org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}")
                testImplementation("org.hibernate.validator:hibernate-validator-annotation-processor:${hibernateValidatorVersion}")
            }
        }
        jooq {
            dependencies {
                implementation("org.jooq:jooq:${jooqVersion}")
                implementation("org.jooq:jooq-kotlin:${jooqVersion}")
                implementation("org.jooq:jooq-meta:${jooqVersion}")
                implementation("org.jooq:jooq-codegen:${jooqVersion}")
            }
        }
    }

    test {
        useJUnitPlatform()
    }
}

